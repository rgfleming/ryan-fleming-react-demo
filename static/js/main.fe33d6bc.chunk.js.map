{"version":3,"sources":["logo.svg","ryan-kendo-components/ImageCell.js","App.js","telerik-kendo-components/dropdownFilterCell.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ImageCell","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_src","props","dataItem","field","_width","undefined","width","_height","height","_alt","alt","react_default","a","createElement","src","Component","albums","App","_this","data","defaultItem","call","state","title","error","isLoaded","filter","filterChange","bind","assertThisInitialized","AlbumFilterCell","_React$Component","_class","className","dist_es_main","onChange","event","hasValue","target","operator","syntheticEvent","disabled","onClick","preventDefault","React","setState","getData","slice","filterBy","_this2","fetch","then","res","json","result","_this$state","message","logo","style","backgroundColor","main","filterable","onFilterChange","filterCell","cell","item","ImageCell_ImageCell","assign","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fe33d6bc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\n\r\n/* Note: This component was created by Ryan */\r\nexport class ImageCell extends Component {\r\n    render() {\r\n        const _src    = this.props.dataItem[this.props.field];\r\n        const _width  = undefined !== this.props.width  ? this.props.width  : \"100px;\";\r\n        const _height = undefined !== this.props.height ? this.props.height : \"100px;\";\r\n        const _alt    = undefined !== this.props.alt    ? this.props.alt    : \"Uh-oh!;\";\r\n        return (\r\n            <td>\r\n                <img src={_src} alt={_alt} width={_width} height={_height}></img>\r\n            </td>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport '@progress/kendo-theme-bootstrap/dist/all.css';\r\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\r\nimport { filterBy } from '@progress/kendo-data-query';\r\nimport { ImageCell } from './ryan-kendo-components/ImageCell';\r\nimport dropdownFilterCell from './telerik-kendo-components/dropdownFilterCell';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst albums = [1,2,3];\r\n\r\nclass App extends Component {\r\n    AlbumFilterCell;\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: \"Ryan's First React App\",\r\n            error: null,\r\n            isLoaded: false,\r\n            data: [],\r\n            filter: undefined\r\n        };\r\n        this.filterChange = this.filterChange.bind(this);\r\n        this.AlbumFilterCell = dropdownFilterCell(albums, 'All');\r\n    }\r\n\r\n    filterChange(event) {\r\n        this.setState({\r\n            data: this.getData(event.filter),\r\n            filter: event.filter\r\n        });\r\n    }\r\n\r\n    getData(filter) {\r\n        const data = this.state.data.slice();\r\n        return filterBy(data, filter);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        fetch(\"https://jsonplaceholder.typicode.com/photos\")\r\n        .then(res => res.json())\r\n        .then(\r\n            (result) => {\r\n                this.setState({\r\n                    isLoaded: true,\r\n                    data: result\r\n                });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n    \r\n    render() {\r\n        const { error, isLoaded, data } = this.state;\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n            return <div>Loading...</div>;\r\n        } else {\r\n            return (\r\n                <div className=\"App\">\r\n                    <header className=\"App-header\">\r\n                        <img src={logo} className=\"App-logo\" alt=\"logo\" width=\"100px;\" height=\"100px;\"/>\r\n                        <h1 className=\"App-title\">{this.state.title}</h1>\r\n                    </header>\r\n                    <div className=\"container-fluid\" style={{backgroundColor:'red'}}>\r\n                        <div className=\"row\">\r\n                            <div className=\"col\"></div>\r\n                            <div className=\"col\">\r\n                                <Grid data={data}\r\n                                    filterable={true}\r\n                                    filter={this.state.filter}\r\n                                    onFilterChange={this.filterChange}\r\n                                    style={{height:'400px'}}>\r\n                                    <GridColumn field=\"albumId\" title=\"Album\" filterCell={this.AlbumFilterCell} width=\"75px\"/>\r\n                                    <GridColumn field=\"title\" title=\"Title\" filterable={false} width=\"400px\"/>\r\n                                    <GridColumn field=\"url\" title=\"URL\" filterable={false} width=\"325px\"/>\r\n                                    <GridColumn \r\n                                        field=\"thumbnailUrl\"\r\n                                        title=\" \"\r\n                                        filterable={false}\r\n                                        width=\"50px\"\r\n                                        cell={(item) => <ImageCell {...item} width=\"21px;\" height=\"21px;\"/>}\r\n                                        />\r\n                                </Grid>\r\n                            </div>\r\n                            <div className=\"col\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default App;","import React from 'react';\r\n\r\nimport { DropDownList } from '@progress/kendo-react-dropdowns';\r\n\r\n/* Note: This code was created by Telerik.\r\n** It's used by Telerik here:\r\n** https://www.telerik.com/kendo-react-ui/components/grid/filtering/#toc-custom-filter-cell\r\n** It can be found here:\r\n** https://stackblitz.com/run/?file=app%2FdropdownFilterCell.js */\r\n\r\nexport default function dropdownFilterCell(data, defaultItem) {\r\n    return class extends React.Component {\r\n        hasValue(value) {\r\n            return value && value !== defaultItem;\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <div className=\"k-filtercell\">\r\n                    <DropDownList\r\n                        data={data}\r\n                        onChange={(event) => {\r\n                            const hasValue = this.hasValue(event.target.value);\r\n                            this.props.onChange({\r\n                                value: hasValue ? event.target.value : '',\r\n                                operator: hasValue ? 'eq' : '',\r\n                                syntheticEvent: event.syntheticEvent\r\n                            });\r\n                        }}\r\n                        value={this.props.value || defaultItem}\r\n                        defaultItem={defaultItem}\r\n                    />\r\n                    <button\r\n                        className=\"k-button k-button-icon k-clear-button-visible\"\r\n                        title=\"Clear\"\r\n                        disabled={!this.hasValue(this.props.value)}\r\n                        onClick={(event) => {\r\n                            event.preventDefault();\r\n                            this.props.onChange({\r\n                                value: '',\r\n                                operator: '',\r\n                                syntheticEvent: event\r\n                            });\r\n                        }}\r\n                    >\r\n                        <span className=\"k-icon k-i-filter-clear\" />\r\n                    </button>\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}