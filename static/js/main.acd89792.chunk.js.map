{"version":3,"sources":["logo.svg","ImageCell.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ImageCell","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_src","props","dataItem","field","_width","undefined","width","_height","height","_alt","alt","react_default","a","createElement","src","Component","App","_this","call","state","title","error","isLoaded","items","_this2","fetch","then","res","json","result","setState","_this$state","message","className","logo","style","backgroundColor","main","data","cell","item","ImageCell_ImageCell","assign","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.acd89792.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nexport class ImageCell extends Component {\r\n    render() {\r\n        const _src    = this.props.dataItem[this.props.field];\r\n        const _width  = undefined !== this.props.width  ? this.props.width  : \"100px;\";\r\n        const _height = undefined !== this.props.height ? this.props.height : \"100px;\";\r\n        const _alt    = undefined !== this.props.alt    ? this.props.alt    : \"Uh-oh!;\";\r\n        return (\r\n            <td>\r\n                <img src={_src} alt={_alt} width={_width} height={_height}></img>\r\n            </td>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport '@progress/kendo-theme-bootstrap/dist/all.css';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nimport { ImageCell } from './ImageCell';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: \"Ryan's First React App\",\n            error: null,\n            isLoaded: false,\n            items: []\n        };\n    }\n\n    componentDidMount() {\n        fetch(\"https://jsonplaceholder.typicode.com/photos\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        items: result\n                    });\n                },\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n    \n    render() {\n        const { error, isLoaded, items } = this.state;\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>Loading...</div>;\n        } else {\n            return (\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <img src={logo} className=\"App-logo\" alt=\"logo\" width=\"100px;\" height=\"100px;\"/>\n                        <h1 className=\"App-title\">{this.state.title}</h1>\n                    </header>\n                    <div className=\"container-fluid\" style={{backgroundColor:'red'}}>\n                        <div className=\"row\">\n                            <div className=\"col\"></div>\n                            <div className=\"col\">\n                                <Grid data={items} style={{ height: '400px' }}>\n                                    <GridColumn field=\"albumId\" title=\"Album\" width=\"75px\"/>\n                                    <GridColumn field=\"title\" title=\"Title\" width=\"400px\"/>\n                                    <GridColumn field=\"url\" title=\"URL\" width=\"325px\"/>\n                                    <GridColumn \n                                        field=\"thumbnailUrl\"\n                                        title=\" \"\n                                        width=\"50px\"\n                                        cell={(item) => <ImageCell {...item} width=\"21px;\" height=\"21px;\"/>}\n                                        />\n                                </Grid>\n                            </div>\n                            <div className=\"col\"></div>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}